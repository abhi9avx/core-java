package com.company.collection;

import java.util.ArrayDeque;

public class Array_Deque_collection {
    public static void main(String[] args) {
        // ‚úÖ Creating an ArrayDeque of Integer type
        ArrayDeque<Integer> ad1 = new ArrayDeque<>();

        // ‚úÖ Adding elements (by default adds at end)
        ad1.add(5);
        ad1.add(56);
        ad1.add(3);

        // ‚úÖ Adding at specific ends
        ad1.addFirst(35); // Adds at beginning
        ad1.addLast(34);  // Adds at end

        // ‚úÖ Retrieving elements without removing
        System.out.println("First element: " + ad1.getFirst());
        System.out.println("Last element: " + ad1.getLast());

        // ‚úÖ Peek methods (safe retrieval, returns null if empty)
        System.out.println("Peek First: " + ad1.peekFirst());
        System.out.println("Peek Last: " + ad1.peekLast());

        // ‚úÖ Removing from both ends
        ad1.removeFirst(); // Removes head
        ad1.removeLast();  // Removes tail

        // ‚úÖ Check if empty and size
        System.out.println("Is deque empty? " + ad1.isEmpty());
        System.out.println("Size of deque: " + ad1.size());

        // ‚úÖ Iterating through all elements
        System.out.println("Deque elements:");
        for (Integer value : ad1) {
            System.out.println(value);
        }

        // ‚úÖ Clearing the deque
        ad1.clear();
        System.out.println("Deque cleared. Is now empty? " + ad1.isEmpty());
    }
}

/*

üîÅ Common ArrayDeque Methods in Java (Point-wise):
	‚Ä¢	add(e)
‚û§ Adds the element at the end of the deque.
	‚Ä¢	addFirst(e)
‚û§ Adds the element at the beginning of the deque.
	‚Ä¢	addLast(e)
‚û§ Adds the element at the end, same as add().
	‚Ä¢	getFirst()
‚û§ Retrieves (but does not remove) the first element.
‚û§ Throws an exception if the deque is empty.
	‚Ä¢	getLast()
‚û§ Retrieves (but does not remove) the last element.
‚û§ Throws an exception if the deque is empty.
	‚Ä¢	peekFirst()
‚û§ Safely retrieves the first element.
‚û§ Returns null if the deque is empty.
	‚Ä¢	peekLast()
‚û§ Safely retrieves the last element.
‚û§ Returns null if the deque is empty.
	‚Ä¢	removeFirst()
‚û§ Removes and returns the first element.
	‚Ä¢	removeLast()
‚û§ Removes and returns the last element.
	‚Ä¢	isEmpty()
‚û§ Checks if the deque is empty.
‚û§ Returns true if empty, false otherwise.
	‚Ä¢	size()
‚û§ Returns the number of elements present in the deque.
	‚Ä¢	clear()
‚û§ Removes all elements from the deque, making it empty.

‚∏ª


 */