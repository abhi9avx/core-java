
‚∏ª-----------
Error & Exception

No matter how smart we are, errors are our constant companions.
With practice, we get better at finding, fixing, and understanding them.

‚∏ª

Three Types of Errors in Java:
	1.	Syntax Error
	2.	Logical Error
	3.	Run-Time Error ‚Üí Also called Exception

‚∏ª

1. Syntax Error (Faced by Programmer)

These errors occur when the compiler finds something wrong with the structure of the code.
It prevents the program from compiling.

Examples:

int a = 9    // ‚Üí Missing semicolon
a = a+;      // ‚Üí Incomplete expression
d = 5;       // ‚Üí Variable 'd' not declared

These are caught at compile-time and are usually easy to fix.

‚∏ª

2. Logical Error (Faced by Programmer)

A logical error or bug happens when the program compiles and runs but does not behave as expected.

Examples:
	1.	Message delivered to the wrong user
	2.	Chat time displayed incorrectly
	3.	Wrong page redirection
	4.	Incorrect calculations or outputs

These are harder to detect as the program runs without crashing but gives unexpected results.

‚∏ª

3. Run-Time Error (Faced by User) ‚Äî ‚≠ê Important

These occur while the program is running. In Java, they are called Exceptions.

Examples:
	1.	Bad Input (e.g., dividing by zero, invalid user input)
	2.	Resource Constraints (e.g., memory not available, file not found)
	3.	Network failure or DB connection timeout
	4.	Array Index Out of Bound
	5.	Null Pointer Exception

Java provides a strong Exception Handling mechanism to deal with these issues using:
	‚Ä¢	try & catch blocks
	‚Ä¢	throw, throws, and finally keywords

These help in preventing application crashes and allow developers to handle errors gracefully.

‚∏ª

Sure Abhinav! Here‚Äôs your note rewritten in a clearer and more professional way, while keeping the structure simple and beginner-friendly ‚Äî great for learning or teaching content:

‚∏ª

üìå What is an Exception in Java?

An exception is an unexpected event that occurs during the execution of a program, which disrupts the normal flow of instructions.

‚∏ª

üîÑ Types of Exceptions in Java

There are mainly two types of exceptions:
	1.	Checked Exception
üëâ Also called Compile-Time Exception
üëâ These are checked by the compiler
üëâ Must be handled using try-catch or declared with throws
	2.	Unchecked Exception
üëâ Also called Run-Time Exception
üëâ Occur during program execution
üëâ Not checked at compile time ‚Äî handled only if needed

‚∏ª

‚ö†Ô∏è Commonly Occurring Exceptions
	1.	NullPointerException
‚Üí Accessing methods or variables on a null object
	2.	ArithmeticException
‚Üí Dividing a number by zero (e.g., 100 / 0)
	3.	ArrayIndexOutOfBoundsException
‚Üí Trying to access an array index that doesn‚Äôt exist
	4.	IllegalArgumentException
‚Üí Passing an illegal or inappropriate argument to a method
	5.	NumberFormatException
‚Üí Trying to convert an invalid string to a number
‚Üí Example: Integer.parseInt("abc")

‚∏ª

The throw Keywords

the throw keyword is used to throw an exception explicitly by the programmer
if(b==0){
throw new ArithmeticException ("Divide by zero) ;
}
else{
return a/b;
}

in similar way we can throw a user defined exception

üìå Summary:
	‚Ä¢	throw is used to manually throw exceptions during program execution.
	‚Ä¢	Can be used with built-in exceptions (ArithmeticException, NullPointerException) or custom exceptions.
	‚Ä¢	Useful for input validation, business logic checks, and custom error reporting.

‚∏ª

‚úÖ The throw Keyword in Java

The throw keyword is used to explicitly throw an exception in Java ‚Äî either a built-in exception or a user-defined (custom) one.


public int divide(int a, int b) {
    if (b == 0) {
        // Manually throwing an ArithmeticException
        throw new ArithmeticException("‚ùå Cannot divide by zero");
    } else {
        return a / b;
    }
}
 This helps us take control over how and when exceptions should be raised, rather than relying on Java to do it automatically.


 class MyCustomException extends Exception {
     public MyCustomException(String message) {
         super(message);
     }
 }
üî∏ Example ‚Äì Throwing a Custom/User-Defined Exception:
 public class Demo {
     public static void main(String[] args) throws MyCustomException {
         int age = 15;
         if (age < 18) {
             // Manually throwing our custom exception
             throw new MyCustomException("‚ùå Age must be 18 or above to vote");
         } else {
             System.out.println("‚úÖ You are eligible to vote.");
         }
     }
 }


‚úÖ throws Keyword in Java ‚Äì Explained Simply

In Java, the throws keyword is used in a method declaration to indicate that the method might throw an exception.

It alerts the programmer that they should be prepared to handle this exception using a try-catch block or by propagating it further.

‚∏ª

üß† Why use throws?
	‚Ä¢	It doesn‚Äôt handle the exception itself.
	‚Ä¢	Instead, it tells the caller: ‚ÄúHey, this method might cause a problem ‚Äî be ready!‚Äù

‚∏ª

üîπ Syntax Example:

public static int divide(int a, int b) throws ArithmeticException {
    return a / b;
}

Here:
	‚Ä¢	We‚Äôre declaring that this divide method might throw an ArithmeticException (like divide by zero).
	‚Ä¢	The actual exception can be handled where this method is called.

‚∏ª

üî∏ Usage with try-catch:

public static void main(String[] args) {
    try {
        int result = divide(10, 0);  // ‚ùå This will throw an ArithmeticException
        System.out.println("Result: " + result);
    } catch (ArithmeticException e) {
        System.out.println("‚ö†Ô∏è Exception caught: " + e.getMessage());
    }
}


‚∏ª

üìå Quick Summary:

Keyword	What it does	Used in
throw	Manually throw an exception	Inside method body
throws	Declare that a method might throw one	In method signature


‚∏ª

Finally Block

Finally block contains teh code which is always executed whether the exception is handle or not .
It is used to execute code containing instruction to release the system resources , close connection etc
