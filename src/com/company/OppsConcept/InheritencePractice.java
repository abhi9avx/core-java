package com.company.OopsConcept;

// ðŸ”µ Parent Class: Circle
class Circle {
    protected int radius;

    // Constructor for Circle
    Circle(int radius) {
        this.radius = radius;
        System.out.println("âœ… Circle parameterized constructor called.");
    }

    // Method to calculate area of the circle
    public double area() {
        return Math.PI * radius * radius;
    }
}

// ðŸŸ¡ Child Class: Cylinder extending Circle
class Cylinder extends Circle {
    private int height;

    // Constructor for Cylinder
    Cylinder(int radius, int height) {
        super(radius);  // Call the constructor of Circle
        this.height = height;
        System.out.println("âœ… Cylinder parameterized constructor called.");
    }

    // Method to calculate volume of the cylinder
    public double volume() {
        return Math.PI * radius * radius * height;
    }
}

// ðŸ§ª Main class to test inheritance
public class InheritencePractice{
    public static void main(String[] args) {
        Cylinder cylinder = new Cylinder(12, 5);

        System.out.println("ðŸ”¹ Area of Circle (base): " + cylinder.area());
        System.out.println("ðŸ”¹ Volume of Cylinder: " + cylinder.volume());
    }
}


/*
ðŸ“Œ Summary & Key Points:

âœ… Inheritance:
	â€¢	Cylinder class inherits properties and methods from the Circle class.
	â€¢	super(radius) is used to call the constructor of the parent class.

âœ… Code Reusability:
	â€¢	Cylinder doesnâ€™t need to re-implement area() â€” it reuses it from Circle.

âœ… Encapsulation & Clean Design:
	â€¢	Proper naming (Cylinder instead of Cylinder1) and access modifiers (protected, private) used for clarity and safety.

âœ… Math Logic:
	â€¢	Circle Area: Ï€ Ã— rÂ²
	â€¢	Cylinder Volume: Ï€ Ã— rÂ² Ã— h
 */